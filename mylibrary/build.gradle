import groovy.util.slurpersupport.GPathResult

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'


android {
    compileSdkVersion 28


    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        tx {

        }

    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'androidx.appcompat:appcompat:1.0.2'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    compile "androidx.core:core-ktx:+"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    api("com.github.bumptech.glide:glide:4.11.0")
    def GLIDE_VERSION = "4.11.0"
// webpdecoder
    api "com.zlc.glide:webpdecoder:1.7.${GLIDE_VERSION}"
    api 'com.github.sahasbhop:apng-view:1.3'
    annotationProcessor("com.github.bumptech.glide:compiler:4.11.0")
    api "com.github.CymChad:BaseRecyclerViewAdapterHelper:2.9.42"
    api "androidx.recyclerview:recyclerview:1.1.0"
    api "com.gyf.immersionbar:immersionbar:3.0.0-beta03"
    api "androidx.lifecycle:lifecycle-process:2.3.0-alpha05"
    api "androidx.lifecycle:lifecycle-common-java8:2.3.0-alpha05"
    api "com.google.android.material:material:1.2.0"
    api "com.github.CymChad:BaseRecyclerViewAdapterHelper:3.0.4"
//    api "androidx.collection:collection-ktx:1.1.0"
    api 'androidx.core:core-ktx:1.3.1'
    api "androidx.collection:collection-ktx:1.1.0"
    api "androidx.fragment:fragment-ktx:1.2.5"

    api "androidx.lifecycle:lifecycle-runtime-ktx:2.2.0"
    api "androidx.lifecycle:lifecycle-livedata-ktx:2.2.0"
    api "androidx.lifecycle:lifecycle-viewmodel-ktx:2.3.0-alpha07"
    api "androidx.lifecycle:lifecycle-reactivestreams-ktx:2.2.0"

    api "io.reactivex.rxjava3:rxjava:3.0.6"
    api 'io.reactivex.rxjava3:rxandroid:3.0.0'
    api "androidx.multidex:multidex:2.0.1"
    // Kotlin + coroutines
    api "androidx.work:work-runtime-ktx:2.4.0"//kotlin 选这个

    // optional - RxJava2 support
    api "androidx.work:work-rxjava2:2.4.0"//配合rxjava2 使用
    api "com.google.code.gson:gson:2.8.5"

    //core
    api 'com.github.kittinunf.fuel:fuel:2.2.0'

    //packages
    api 'com.github.kittinunf.fuel:fuel-coroutines:2.2.0'
}

tasks.create("parse").doLast {
    def xparse = new XmlSlurper()
    def file = new File("/Users/zlw/IntelliJIDEAProjects/TestDemo/mylibrary/src/main/AndroidManifest.xml")
//    def file = new File("")
    println("absolutePath : ${file.absolutePath}")
    GPathResult result = xparse.parse(file)
    println "versionName : ${result.@'android:versionName'}"
//    def book4 = result.value.books.book[3]
//    println "book4 = $book4  book.author : ${book4.author}  book.availabel : ${book4.@available} book.id : ${book4.@id}"
}

gradle.taskGraph.whenReady { graph ->

    List<Action> actions = tasks.getByName("assembleRelease").actions

//    actions.add {
//        println("我是一个action")
//    }
    actions.add(new Action<Task>() {
        @Override
        void execute(Task task) {
            println("我给${task.name}添加了一个actioin")
        }
    })
    println("actions = \n $actions")



}

println "versionname : ${android.defaultConfig.versionName}"



gradle.beforeProject {
    println "beforeProject"
}
gradle.afterProject {
    println "afterProject"
}

gradle.buildFinished {
    println "buildFiinished"
}
println("root project dir : ${getRootProject().getRootDir()}  ${getRootDir()}")
gradle.buildStarted {
    println "buildStarted"
}

repositories {
    mavenCentral()
}

apply plugin: "maven"

version "1.1.0"

group 'com.yunji.library"'

task androidJavadocs(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    failOnError false//忽略编码错误
}
task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    from androidJavadocs.destinationDir
    classifier = 'javadoc'
}

task androidSourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

//同时把源码和注释打包进去
artifacts {
    archives androidSourcesJar
    archives androidJavadocsJar
}



artifacts {

}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url:"file:///home/zlw/IntelliJIDEAProjects/TestDemo/app/libs")

            pom.project {
                groupId 'com.yunji.library'
                artifactId = "mylibrary"
                version "1.0.5"
            }

        }
    }
}